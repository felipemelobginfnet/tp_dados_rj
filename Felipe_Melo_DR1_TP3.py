#!/usr/bin/env python
# coding: utf-8

# In[33]:


get_ipython().run_cell_magic('writefile', 'modelo.py', '\nimport pandas as pd\nimport streamlit as st\nfrom io import StringIO\nimport time\nfrom st_aggrid import AgGrid, GridOptionsBuilder\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport numpy as np\n\n\nst.write("""Este painel tem como objetivo dar insights em relação a sazonalidade de visitas ao parque, \nauxiliando o visitante a escolher o melhor dia para não enfrentar grandes esperas""")\n\n\n@st.cache_data\ndef load_data(file):\n    return pd.read_csv(file)\n\ndf = pd.read_excel("visitantes_por_dia.xlsx", sheet_name="2023")\ndf = df.dropna(subset=["Data.Rio", "Unnamed: 3"])\ndf.columns = ["Mes",\n    "Visitantes Dias uteis", \n    "Visitantes Fins de semana, feriados e pontos facultativos", \n    "Total Visitantes Mensais", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", \n    "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", \n    "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31"\n]\n\nif "mes_selecionado" not in st.session_state:\n    st.session_state["mes_selecionado"] = []\n\nif "tipo_dia" not in st.session_state:\n    st.session_state["tipo_dia"] = "Visitantes Dias uteis"\n\nif "colunas_selecionadas" not in st.session_state:\n    st.session_state["colunas_selecionadas"] = ["Mes", "Total Visitantes Mensais"]\n\nif "bg_color" not in st.session_state:\n    st.session_state["bg_color"] = "#000000"  \n\nif "font_color" not in st.session_state:\n    st.session_state["font_color"] = "#FFFFFF"  \n\nst.title("Upload de Arquivo CSV - Dados de Turismo")\n\nst.write("Por favor, faça o upload de um arquivo CSV contendo dados de turismo do portal Data.Rio.")\n\narquivo_upload = st.file_uploader("Escolha o arquivo CSV", type="csv")\n\nst.sidebar.header("Personalização de cores")\nbg_color = st.sidebar.color_picker("Escolha a cor de fundo", st.session_state["bg_color"])\nfont_color = st.sidebar.color_picker("Escolha a cor da fonte", st.session_state["font_color"])\n\nst.session_state["bg_color"] = bg_color\nst.session_state["font_color"] = font_color\n\ncodigo_css = f"""\n    <style>\n    .stApp {{\n        background-color: {bg_color};\n        color: {font_color};\n    }}\n    h1, h2, h3, h4, h5, h6, p, div, label, span, .stMarkdown {{\n        color: {font_color} !important;\n    }}\n    .css-1v0mbdj a {{\n        color: {font_color} !important;  /* Links */\n    }}\n    </style>\n"""\nst.markdown(codigo_css, unsafe_allow_html=True)\n\nif arquivo_upload is not None:\n    with st.spinner("Processando o arquivo..."):\n        time.sleep(2)  \n        \n        progress_bar = st.progress(0)\n        \n        for percent_complete in range(1, 6):\n            time.sleep(1)  \n            progress_bar.progress(percent_complete * 20)\n\n        df = load_data(arquivo_upload)\n\n        st.write("Aqui estão os primeiros registros do seu arquivo:")\n        st.dataframe(df.head())\n\n        st.write("Informações sobre o arquivo:")\n        st.write(df.describe())\n    \n    st.success("Arquivo processado com sucesso!")\nelse:\n    st.write("Nenhum arquivo foi carregado ainda.")\n\nst.sidebar.header("Filtros")\n\nmes_selecionado = st.sidebar.multiselect(\n    "Selecione o mês", \n    df["Mes"].unique(), \n    default=st.session_state["mes_selecionado"]\n)\nst.session_state["mes_selecionado"] = mes_selecionado\n\ntipo_dia = st.sidebar.radio(\n    "Tipo de Dia",\n    ("Visitantes Dias uteis", "Visitantes Fins de semana, feriados e pontos facultativos"),\n    index=("Visitantes Dias uteis", "Visitantes Fins de semana, feriados e pontos facultativos").index(st.session_state["tipo_dia"])\n)\nst.session_state["tipo_dia"] = tipo_dia\n\ncolunas_selecionadas = st.sidebar.multiselect(\n    "Selecione as colunas que deseja visualizar",\n    df.columns,\n    default=st.session_state["colunas_selecionadas"]\n)\nst.session_state["colunas_selecionadas"] = colunas_selecionadas\n\nif mes_selecionado:\n    df_filtrado = df[df["Mes"].isin(mes_selecionado)][colunas_selecionadas]\nelse:\n    df_filtrado = df[colunas_selecionadas]\n\nst.subheader("Tabela Interativa")\n\ngb = GridOptionsBuilder.from_dataframe(df_filtrado)\ngb.configure_default_column(editable=False, filter=True, sortable=True)\ngrid_options = gb.build()\n\nAgGrid(df_filtrado, gridOptions=grid_options, height=400, theme="streamlit")\n\ncsv = df_filtrado.to_csv(index=False)\nst.download_button(\n    label="Baixar dados filtrados em CSV",\n    data=csv,\n    file_name="dados_filtrados.csv",\n    mime="text/csv"\n)\n\nst.subheader("Métricas Básicas")\n\nif "Total Visitantes Mensais" in df_filtrado.columns:\n    media_mensal = df_filtrado["Total Visitantes Mensais"].mean()\n    st.metric(label="Média Mensal", value=f"{int(media_mensal)}")\n\nif "Total Visitantes Mensais" in df_filtrado.columns:\n    soma_mensal = df_filtrado["Total Visitantes Mensais"].sum()\n    st.metric(label="Visitantes no Ano", value=f"{soma_mensal}")\n\nst.subheader("Visualizações")\n\nif "Total Visitantes Mensais" in df_filtrado.columns and "Mes" in df_filtrado.columns:\n    bar_chart = px.bar(df_filtrado, x="Mes", y="Total Visitantes Mensais", title="Visitantes por Mês")\n    st.plotly_chart(bar_chart)\n\n\ntotal_visitantes_dias_uteis = df["Visitantes Dias uteis"].sum()\ntotal_fins_semana_feriados = df["Visitantes Fins de semana, feriados e pontos facultativos"].sum()\n\ngrafico = pd.DataFrame({\n    "Categoria": ["Dias Uteis", "Fins de Semana/Feriados"],\n    "Valor": [total_visitantes_dias_uteis, total_fins_semana_feriados]\n})\n\npie_chart = px.pie(\n    grafico, \n    names="Categoria", \n    values="Valor", \n    title="Comparação de Visitantes",\n    color_discrete_sequence=["#000080", "#800000"] \n)\n\npie_chart.update_layout(\n    title_font=dict(color="white"),\n    font=dict(color="white"),\n    legend_font=dict(color="white"),\n    paper_bgcolor=st.session_state["bg_color"],\n    plot_bgcolor=st.session_state["bg_color"]\n)\n\nst.plotly_chart(pie_chart)\n\nordem_meses = [\n    "janeiro", "fevereiro", "março", "abril", "maio", "junho", \n    "julho", "agosto", "setembro", "outubro", "novembro", "dezembro"\n]\n\ncolunas_dias = [str(i) for i in range(1, 32)]  \n\ncolunas_dias_existentes = [col for col in colunas_dias if col in df.columns]\ndf["Média Visitantes Diários"] = df[colunas_dias_existentes].mean(axis=1)\n\ndf["Mes"] = pd.Categorical(df["Mes"], categories=ordem_meses, ordered=True)\n\n\nmedia_diaria_por_mes = df.groupby("Mes")["Média Visitantes Diários"].mean().reset_index()\n\nst.subheader("Gráfico de Barras: Média de Visitantes Diários por Mês")\nbar_chart_media_diaria = px.bar(\n     media_diaria_por_mes, \n     x="Mes", \n     y="Média Visitantes Diários", \n     title="Média de Visitantes Diários por Mês",\n     labels={"Média Visitantes Diários": "Média de Visitantes Diários"}\n)\n\nbar_chart_media_diaria.update_layout(\n     title_font=dict(color="white"),\n     font=dict(color="white"),\n     paper_bgcolor=st.session_state["bg_color"],\n     plot_bgcolor=st.session_state["bg_color"]\n)\n\nst.plotly_chart(bar_chart_media_diaria)\n')


# In[ ]:


get_ipython().system('streamlit run modelo.py')


# In[ ]:




